using System;
using QChompLibrary;

namespace ConsoleQChomp
{
    // Used for console output methods
    class ASCIIGraphics
    {
        // ASCII-representation of the grid
        public static void Display(Field game)
        {
            // Horizontal alphabetic helper line
            Console.Write("     ");
            char c = 'A';
            for (int i = 0; i < game.GridWidth; i++)
            {
                Console.Write($"{c++}   ");
            }
            Console.WriteLine();

            // Print the first grid cells divider
            PrintDivider(game.GridWidth);

            // The rest of the grid
            for (int i = 0; i < game.GridHeight; i++)
            {
                Console.Write("{0, -3}|", i + 1);
                for (int j = 0; j < game.GridWidth; j++)
                {
                    char val = ' ';
                    ConsoleColor outputForeColor = default, outputBackColor = default;

                    // Get suitable char and color for current cell condition
                    switch (game.Grid[i, j])
                    {
                        case (int)Field.Conditions.Poisoned:
                            val = '*';
                            outputForeColor = ConsoleColor.White;
                            outputBackColor = ConsoleColor.Red;
                            break;

                        case (int)Field.Conditions.Used:
                            val = '/';
                            outputForeColor = ConsoleColor.White;
                            outputBackColor = ConsoleColor.Blue;
                            break;

                        case (int)Field.Conditions.Blank:
                            val = ' ';
                            break;
                    }

                    Console.Write(" ");
                    Console.ForegroundColor = outputForeColor;
                    Console.BackgroundColor = outputBackColor;
                    Console.Write($"{val}");
                    Console.ResetColor();
                    Console.Write(" |");
                }
                Console.WriteLine();

                // Print the closing divider
                PrintDivider(game.GridWidth);
            }

            Console.WriteLine();
        }

        // Prints ASCII-divider "|---|" with 3-space alignment
        public static void PrintDivider(int length)
        {
            Console.Write("   ");
            for (int i = 0; i < length; i++)
            {
                Console.Write("|---");
            }
            Console.WriteLine("|");
        }

        // Prints command list and exits
        public static void PrintHelp()
        {
            Console.WriteLine("Command list:");
            Console.WriteLine(" {0, -21} {1, -10}", "-h|--help", "Show command list.");
            Console.WriteLine(" {0, -21} {1, -10}", "--save", "Save model with autogenerated name.");
            Console.WriteLine(" {0, -21} {1, -10}", "--save [filename]", "Save model with the given name.");
            Console.WriteLine(" {0, -21} {1, -10}\n", "--load [filename]", "Load model from file.");
        }

        // Prints red-colored message about incorrect command-line args sequence
        public static void InvalidArgsMessage()
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Invalid command. See the list of available commands.");
            Console.ResetColor();
            PrintHelp();
        }
    }
}
